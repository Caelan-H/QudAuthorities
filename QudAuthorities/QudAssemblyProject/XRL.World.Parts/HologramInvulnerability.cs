using System;
using XRL.Language;
using XRL.World.Capabilities;

namespace XRL.World.Parts;

[Serializable]
public class HologramInvulnerability : IPart
{
	public override void AddedAfterCreation()
	{
		base.AddedAfterCreation();
		ParentObject.MakeNonflammable();
	}

	public override bool WantEvent(int ID, int cascade)
	{
		if (!base.WantEvent(ID, cascade) && ID != CanBeDismemberedEvent.ID && ID != CanBeInvoluntarilyMovedEvent.ID && ID != GetMatterPhaseEvent.ID && ID != GetMaximumLiquidExposureEvent.ID && ID != GetScanTypeEvent.ID && ID != ObjectCreatedEvent.ID)
		{
			return ID == RespiresEvent.ID;
		}
		return true;
	}

	public override bool HandleEvent(ObjectCreatedEvent E)
	{
		ParentObject.MakeImperviousToHeat();
		return base.HandleEvent(E);
	}

	public override bool HandleEvent(CanBeDismemberedEvent E)
	{
		if (E.Object == ParentObject)
		{
			return false;
		}
		return base.HandleEvent(E);
	}

	public override bool HandleEvent(CanBeInvoluntarilyMovedEvent E)
	{
		if (E.Object == ParentObject)
		{
			return false;
		}
		return base.HandleEvent(E);
	}

	public override bool HandleEvent(GetMatterPhaseEvent E)
	{
		E.MinMatterPhase(4);
		return false;
	}

	public override bool HandleEvent(GetMaximumLiquidExposureEvent E)
	{
		E.PercentageReduction = 100;
		return false;
	}

	public override bool HandleEvent(GetScanTypeEvent E)
	{
		if (E.Object == ParentObject)
		{
			E.ScanType = Scanning.Scan.Tech;
			return false;
		}
		return base.HandleEvent(E);
	}

	public override bool HandleEvent(RespiresEvent E)
	{
		return false;
	}

	public override bool AllowStaticRegistration()
	{
		return true;
	}

	public override void Register(GameObject Object)
	{
		Object.RegisterPartEvent(this, "BeforeApplyDamage");
		base.Register(Object);
	}

	public override bool FireEvent(Event E)
	{
		if (E.ID == "BeforeApplyDamage")
		{
			GameObject gameObjectParameter = E.GetGameObjectParameter("Owner");
			if (gameObjectParameter != null)
			{
				if (gameObjectParameter.IsPlayer())
				{
					string text = IComponent<GameObject>.ConsequentialColor(ParentObject);
					IComponent<GameObject>.AddPlayerMessage(text + "Your attack passes harmlessly through " + ParentObject.the + ParentObject.DisplayNameOnly + text + ".");
					E.SetParameter("DidSpecialEffect", 1);
				}
				else if (IComponent<GameObject>.Visible(gameObjectParameter) || IComponent<GameObject>.Visible(ParentObject))
				{
					string text2 = IComponent<GameObject>.ConsequentialColor(ParentObject);
					IComponent<GameObject>.AddPlayerMessage(text2 + Grammar.MakePossessive(gameObjectParameter.The + gameObjectParameter.DisplayNameOnly) + text2 + " attack passes harmlessly through " + ParentObject.the + ParentObject.DisplayNameOnly + text2 + ".");
					E.SetParameter("DidSpecialEffect", 1);
				}
			}
			return false;
		}
		return base.FireEvent(E);
	}
}
